(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{353:function(t,a,s){"use strict";s.r(a);var e=s(7),v=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("结合上一篇文章"),a("a",{attrs:{href:"https://lisanshiyi.com/md/network/grpc/2022-03-05-Protobuf-Varint.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Varint基础原理分析》"),a("OutboundLink")],1),t._v("，我们了解到通过"),a("code",[t._v("Varint")]),t._v(" 编码整数，如遇到负数或大整数，就不具备压缩优势了？由于引入了"),a("code",[t._v("MSB")]),t._v("，不但没有好的压缩效果，还加大了存储，这明显不是我们想要的。以下，我们聊聊怎么解决这类问题。")]),t._v(" "),a("p",[t._v("这篇文章，也是学习"),a("code",[t._v("Protobuf")]),t._v("过程中偶然所得，算法简洁，篇幅较短，预计阅读时间 8 分钟，如果对您有帮助，还望不吝评价，"),a("code",[t._v("求点赞、求评论、求转发")]),t._v("。\n"),a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://img.soogif.com/QpuZ2Lus38r9fVQl7GFQ33utSb868NzH.gif?scope=mdnice",loading:"lazy"}})]),t._v(" "),a("p",[t._v("在聊"),a("code",[t._v("ZigZag")]),t._v("算法之前，我们先聊聊"),a("code",[t._v("进制")]),t._v("、"),a("code",[t._v("原码")]),t._v("、"),a("code",[t._v("反码")]),t._v("、"),a("code",[t._v("补码")]),t._v("相关的知识点，如果你懂，可跳过直接往下翻。")]),t._v(" "),a("h4",{attrs:{id:"什么是进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是进制"}},[t._v("#")]),t._v(" 什么是进制？")]),t._v(" "),a("blockquote",[a("p",[t._v("所谓进制，就是当某一位上的信息满时，需要往前进位。比如，十进制，就是当某一位上的数满十时进位；而某一位上的数满二时进位就是二进制，等等。")]),t._v(" "),a("p",[t._v("进位之间都可以相互转化，例如：\n十进制：10 → 二进制：1010 → 十六进制：A")]),t._v(" "),a("p",[t._v("我之前看过一个答案，说：为什么十进制比较通用？\n因为咱人类只有 10 个手指头，数一遍刚好十个数，所以十进制自然就成为默认的进制。那如果人类长 11 手指头，说不定就是十一进制。")]),t._v(" "),a("p",[t._v("后来计算机的出现，一个数据的有无是最天然的信息承载单元，所以由 0 和 1 组成的二进制很自然成为计算机的进制方式。—— 老苗")])]),t._v(" "),a("p",[t._v("计算机系统里面对二进制定义了"),a("code",[t._v("原码")]),t._v("、"),a("code",[t._v("反码")]),t._v("、"),a("code",[t._v("补码")]),t._v("，为了更简单的理解，后续我们用"),a("code",[t._v("1 Byte=8 bits")]),t._v("进行讲解。")]),t._v(" "),a("h4",{attrs:{id:"原码是啥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原码是啥"}},[t._v("#")]),t._v(" 原码是啥？")]),t._v(" "),a("p",[t._v("**定义：**用第一位表示符号(0为非负，1为负数)，其余位表示值，如下：")]),t._v(" "),a("ul",[a("li",[t._v("+8 -> 原码：0000 1000")]),t._v(" "),a("li",[t._v("-8 -> 原码：1000 1000")])]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://img.soogif.com/NyR3vVECF7NH496hxdt04cii7ggRnX9Q.gif?scope=mdnice",loading:"lazy"}})]),t._v(" "),a("p",[t._v("有了原码的表示方法就可以对数进行算法运算，但是很快就发现用带符号位的原码进行"),a("strong",[t._v("乘除运算结果正确")]),t._v("，但在"),a("strong",[t._v("加减运算时就出现了问题")]),t._v("，如下：")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("乘法规则：符号位做“异或”运算，数值位做类似十进制的“乘法”运算\n十进制：+8 * "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-64")]),t._v("\n原码：0000 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" * "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1100")]),t._v(" 0000 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-64")]),t._v("\n\n十进制：+8 + "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n原码：0000 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" + "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1001")]),t._v(" 0000 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-16")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显然不正确")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("看起来加法运算也没什么问题，发现问题是出在"),a("code",[t._v("符号位")]),t._v("上？于是计算机大佬们引入了"),a("strong",[t._v("反码")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"反码都做了啥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反码都做了啥"}},[t._v("#")]),t._v(" 反码都做了啥？")]),t._v(" "),a("p",[t._v("**定义：**用第一位表示符号(0为非负，1为负数)，其余位，非负数保持不变，负数按位求反，如下：")]),t._v(" "),a("ul",[a("li",[t._v("+8 -> 原码：0000 1000 -> 反码：0000 1000")]),t._v(" "),a("li",[t._v("-8 -> 原码：1000 1000 -> 反码：1111 0111")])]),t._v(" "),a("p",[t._v("我们继续进行上述的加法运算")]),t._v(" "),a("ul",[a("li",[t._v("十进制：+8 + (-8) = 0")]),t._v(" "),a("li",[t._v("反码：0000 1000 + 1111 0111 = 1111 1111 = -0")])]),t._v(" "),a("p",[t._v("竟然结果是"),a("code",[t._v("-0")]),t._v("，这个结果让人猝不及防啊！！！")]),t._v(" "),a("p",[t._v("分析发现，如果用原码 + 补码表示二进制计算，表面上看，似乎挺好的。不过仔细思考就会发现两个问题：")]),t._v(" "),a("p",[a("strong",[t._v("第一")]),t._v("，0竟然可以用两种编码表示，+0 和 -0：")]),t._v(" "),a("ul",[a("li",[t._v("+0 -> 原码：0000 0000 -> 反码：0000 0000")]),t._v(" "),a("li",[t._v("-0 -> 原码：1000 0000 -> 反码：1111 1111")])]),t._v(" "),a("p",[a("strong",[t._v("第二")]),t._v("，计算机不清楚符号位的存在，因此参加运算后，会出现结果为"),a("code",[t._v("-0")]),t._v("这样的现象。")]),t._v(" "),a("p",[t._v("这看起来怪怪的，为了解决这些问题，计算机巨佬们又引入了"),a("strong",[t._v("补码")])]),t._v(" "),a("h4",{attrs:{id:"补码有啥用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补码有啥用"}},[t._v("#")]),t._v(" 补码有啥用？")]),t._v(" "),a("p",[t._v("**定义：**用第一位表示符号(0为非负，1为负数)，剩下的位非负数保持不变，负数按位求反且末尾加一。")]),t._v(" "),a("ul",[a("li",[t._v("+8 -> 原码：0000 1000 -> 补码：0000 1000")]),t._v(" "),a("li",[t._v("-8 -> 原码：1000 1000 -> 补码：1111 1000")])]),t._v(" "),a("p",[t._v("现在我们继续看看，把符号位带入运算会出现什么结果？")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" + "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 0000 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" + "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 0000 0000\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("很明显，通过引入"),a("code",[t._v("补码")]),t._v("，我们解决了此类问题，计算机运算过程中，就不用关心符号问题，统一按照"),a("code",[t._v("满二进一")]),t._v("规则处理即可")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://img.soogif.com/s3xUD46idAN3WMpXbMxTkNly047zPg9b.gif?scope=mdnice",loading:"lazy"}})]),t._v(" "),a("p",[t._v("好了，知识小点就说到这了，接下来，进入真正的主题。")]),t._v(" "),a("h3",{attrs:{id:"zigzag-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zigzag-是什么"}},[t._v("#")]),t._v(" ZigZag 是什么？")]),t._v(" "),a("p",[t._v("在大多数计算机系统中，我们通常使用定长整型"),a("code",[t._v("(fixed length intergers)")]),t._v("表示数值。比如：")]),t._v(" "),a("ul",[a("li",[t._v("用"),a("code",[t._v("4 bytes")]),t._v("表示"),a("code",[t._v("Int32")])]),t._v(" "),a("li",[t._v("用"),a("code",[t._v("8 bytes")]),t._v("表示"),a("code",[t._v("Int64")])])]),t._v(" "),a("p",[t._v("为什么这样设置呢？这样能便于我们的计算机处理，加快处理的速度。")]),t._v(" "),a("p",[t._v("但是在系统网络通信("),a("code",[t._v("RPC")]),t._v(")时，为了传输一个"),a("code",[t._v("1")]),t._v("，我们需要传输"),a("code",[t._v("00000000 00000000 00000000 00000001")]),t._v(" 32 个 bits。这么多字符，而有价值的数据只有 1 位，这T&M也太浪费了呀！")]),t._v(" "),a("p",[t._v("那该怎么办呢？"),a("code",[t._v("ZigZag")]),t._v("算法由此而生。")]),t._v(" "),a("h3",{attrs:{id:"zigzag-的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zigzag-的原理"}},[t._v("#")]),t._v(" ZigZag 的原理")]),t._v(" "),a("p",[a("strong",[t._v("编码介绍")])]),t._v(" "),a("p",[a("code",[t._v("ZigZag")]),t._v("编码将有符号整数映射成无符号整数，以便绝对值较小的数字对应较小的编码值，比如："),a("code",[t._v("-1 -> 1")]),t._v("，"),a("code",[t._v("1 -> 2")]),t._v("，具体如图：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("原数")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("编码")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("3")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("...")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("...")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("-(2^31 -1)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("2^32 - 3")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2^31 -1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("2^32 -2")])])])]),t._v(" "),a("p",[t._v("如上，这种方式通常由正整数和负整数来回"),a("code",[t._v("曲折")]),t._v("编码，看着还挺有意思的。难道就因为这样，计算机大佬们才给取了个名字叫"),a("code",[t._v("ZigZag(锯齿形线条)")]),t._v("算法？？？")]),t._v(" "),a("p",[a("strong",[t._v("编码规则")])]),t._v(" "),a("ul",[a("li",[t._v("a.非负整数，符号位后移")]),t._v(" "),a("li",[t._v("b.负整数，符号位后移，数据位按位求反")])]),t._v(" "),a("p",[t._v("在大多数计算机系统中，以"),a("code",[t._v("4 Bytes")]),t._v("和"),a("code",[t._v("8 Bytes")]),t._v("来表示整数(Int32、Int64)。下面我们选择"),a("code",[t._v("Int32")]),t._v("进行一个简单的演示，如下：")]),t._v(" "),a("ul",[a("li",[t._v("十进制：0"),a("br"),t._v(" "),a("ul",[a("li",[t._v("补 码 ： "),a("font",{attrs:{color:"red"}},[a("b",[t._v("0")])]),t._v("0000000 00000000 00000000 00000000"),a("br")],1),t._v(" "),a("li",[t._v("ZigZag：00000000 00000000 00000000 0000000"),a("font",{attrs:{color:"red"}},[a("b",[t._v("0")])])],1)])]),t._v(" "),a("li",[t._v("十进制：1"),a("br"),t._v(" "),a("ul",[a("li",[t._v("补 码 ： "),a("font",{attrs:{color:"red"}},[a("b",[t._v("0")])]),t._v("0000000 00000000 00000000 00000001"),a("br")],1),t._v(" "),a("li",[t._v("ZigZag：00000000 00000000 00000000 0000001"),a("font",{attrs:{color:"red"}},[a("b",[t._v("0")])])],1)])]),t._v(" "),a("li",[t._v("十进制：-1"),a("br"),t._v(" "),a("ul",[a("li",[t._v("补 码 ： "),a("font",{attrs:{color:"red"}},[a("b",[t._v("1")])]),t._v("1111111 11111111 11111111 11111111"),a("br")],1),t._v(" "),a("li",[t._v("ZigZag：00000000 00000000 00000000 0000000"),a("font",{attrs:{color:"red"}},[a("b",[t._v("1")])])],1)])])]),t._v(" "),a("p",[a("strong",[t._v("解码规则")])]),t._v(" "),a("ul",[a("li",[t._v("类似编码，反向操作即可")])]),t._v(" "),a("h3",{attrs:{id:"zigzag-编码实现-python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zigzag-编码实现-python"}},[t._v("#")]),t._v(" ZigZag 编码实现(Python)")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int32_to_zigzag")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"zigzag-解码实现-python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zigzag-解码实现-python"}},[t._v("#")]),t._v(" ZigZag 解码实现(Python)")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("zigzag_to_int32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("zz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("zz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("zz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://img.soogif.com/F3s7GspEUDq9LBMZQexXq9osUkpNFWPk.gif?scope=mdnice",loading:"lazy"}})]),t._v(" "),a("h3",{attrs:{id:"总结一下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结一下"}},[t._v("#")]),t._v(" 总结一下")]),t._v(" "),a("p",[t._v("大多数情况下，通过"),a("code",[t._v("ZigZag")]),t._v("编码结合"),a("code",[t._v("Varint")]),t._v("算法，对整数都有好的压缩效果，但如果遇到绝对值大的整数，就不再具有压缩优势了。")]),t._v(" "),a("p",[t._v("不过，我们通常使用到的整数往往也都比较小。")]),t._v(" "),a("h3",{attrs:{id:"参考文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),a("ul",[a("li",[t._v("https://en.wikipedia.org/wiki/Zigzag")]),t._v(" "),a("li",[t._v("https://developers.google.com/protocol-buffers/docs/encoding#types")]),t._v(" "),a("li",[t._v("https://studygolang.com/articles/35309")])])])}),[],!1,null,null,null);a.default=v.exports}}]);