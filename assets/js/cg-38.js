(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{330:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"背景概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景概述"}},[s._v("#")]),s._v(" 背景概述")]),s._v(" "),t("ul",[t("li",[s._v("插件化机制使框架与各个模块的实现相解耦，模块统一抽象出基本数据结构与框架的交互接口，模块只要符合统一接口即可做到插件替换。")])]),s._v(" "),t("h3",{attrs:{id:"架构图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构图"}},[s._v("#")]),s._v(" 架构图")]),s._v(" "),t("ul",[t("li",[s._v("PluginCore：通过Plugin Manager调用算法，负责业务逻辑的实现")]),s._v(" "),t("li",[s._v("PluginManger: 通过读取配置文件，负责各种插件的加载、管理、甚至热更新")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/Plugin_System.png"}}),s._v(" "),t("h3",{attrs:{id:"插件实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件实现"}},[s._v("#")]),s._v(" 插件实现")]),s._v(" "),t("h4",{attrs:{id:"import-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import-函数"}},[s._v("#")]),s._v(" "),t("strong",[s._v("import")]),s._v("()函数")]),s._v(" "),t("ul",[t("li",[s._v("用于动态加载类和函数。如果一个模块经常变化就可以使用 "),t("strong",[s._v("import")]),s._v("() 来动态载入")]),s._v(" "),t("li",[s._v("函数语法：")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/import.png"}}),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("__import__(name, globals=None, locals=None, fromlist=(), level=0)\n\tname[必须]：模块名称\n\tglobals - 全局变量集合，默认为None\n\tlocals - 局部变量集合，默认为None\n\tfromlist - 是否导入子模块，看上去是导入模块的列表。但实际是一个判断条件，\n\t只要设置为非空的值，且模块名称是带有子模块的，将导入子模块。\n\t例如：sys.path。当不设置时，返回sys，\n\t如果设置为非空值，则返回ntpath（path模块）\n\tlevel - 绝对或者相对导入\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h4",{attrs:{id:"加载方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载方式"}},[s._v("#")]),s._v(" 加载方式")]),s._v(" "),t("ul",[t("li",[s._v("直接引用加载【老版】")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/plugin_load_1.png"}}),s._v(" "),t("ul",[t("li",[s._v("Importlib包方式【新版】")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/plugin_load_2.png"}}),s._v(" "),t("h3",{attrs:{id:"算法插件服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法插件服务"}},[s._v("#")]),s._v(" 算法插件服务")]),s._v(" "),t("h4",{attrs:{id:"插件定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件定义"}},[s._v("#")]),s._v(" 插件定义")]),s._v(" "),t("ul",[t("li",[s._v("每个插件需要实现公共数据接口和接口方法。")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/plugin_1.png"}}),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("load_model(self, root_path, batch_size=1, devs=None):\n：模型加载入口\npredict(self, req_dict={}):\n：推理算法入口\nversion(self):\n：版本方法\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h4",{attrs:{id:"配置化管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置化管理"}},[s._v("#")]),s._v(" 配置化管理")]),s._v(" "),t("ul",[t("li",[s._v("插件通过配置文件组织可选插件以及 插件名 、插件路径  等信息。")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/plugin_2.png"}}),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("key：配置插件模块的名字\n\tkey: str,\nmodel_dir：配置插件内部方法名字\n\tmodel_dir : str, \ninfer_dir：配置插件具体加载路径（工程下绝对路径）\n\tinfer_dir : str, \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h4",{attrs:{id:"插件管理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件管理器"}},[s._v("#")]),s._v(" 插件管理器")]),s._v(" "),t("ul",[t("li",[s._v("定义了插件管理的方法，插件功能加载、插件获取方法实现")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/plugin_3.png"}}),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("_load_plugin(self, name, dir)\n：插件加载入口，识别配置加载插件\nget_plugin(self, name):\n：插件获取接口，该方法获取插件\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"插件扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件扩展"}},[s._v("#")]),s._v(" 插件扩展")]),s._v(" "),t("ul",[t("li",[s._v("有些时候需要用解耦调用C代码，以linux平台为例说明python调用.so文件的使用方法")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/plugin_4.png"}}),s._v(" "),t("ul",[t("li",[s._v("构建C语言插件")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/plugin_5.png"}}),s._v(" "),t("h3",{attrs:{id:"插件热加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件热加载"}},[s._v("#")]),s._v(" 插件热加载")]),s._v(" "),t("ul",[t("li",[s._v("Importlib.reload方法实现")])]),s._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://lisanshiyi.com/assets/language/python/plugin_6.png"}}),s._v(" "),t("h3",{attrs:{id:"插件优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件优势"}},[s._v("#")]),s._v(" 插件优势")]),s._v(" "),t("ul",[t("li",[s._v("高可扩展：开发者可自由实现符合业务需求的模块插件，直接替换插件配置就可以实现业务扩展")]),s._v(" "),t("li",[s._v("发布灵活：插件可集中发布也可单独发布，配合插件生命周期管理甚至可以实现插件的单独更新")]),s._v(" "),t("li",[s._v("代码解耦：各个插件模块开发和部署都单独进行，能方便的扩展和自由实现符合业务需求的插件")])]),s._v(" "),t("h3",{attrs:{id:"微内核架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微内核架构"}},[s._v("#")]),s._v(" 微内核架构")]),s._v(" "),t("ul",[t("li",[s._v("微内核架构是插件架构模式的一种典型实现，常常把微内核架构也叫做插件式架构")]),s._v(" "),t("li",[s._v("当前微内核架构也被应用在许多我们熟知的产品，比如：操作系统、Chrome浏览器、Eclipse编辑器等")])]),s._v(" "),t("h4",{attrs:{id:"架构图-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构图-2"}},[s._v("#")]),s._v(" 架构图")]),s._v(" "),t("ul",[t("li",[s._v("微内核架构包含两个组件：核心系统（core system）和插件模块（plug-in component）")]),s._v(" "),t("li",[s._v("核心系统只包含让系统可以运作的最小功能")]),s._v(" "),t("li",[s._v("插件模块，则包含一些特殊处理逻辑、额外的功能，用于提供更多的业务能力")])]),s._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://lisanshiyi.com/assets/language/python/Core_System.png",loading:"lazy"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);